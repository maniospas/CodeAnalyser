<?xml version="1.0" encoding="UTF-8" standalone="no"?><root><problem><name>test</name><library/><functionMemberVariable>this</functionMemberVariable><statement><variables>m n k</variables><expression>input</expression></statement><statement><variables>root h b</variables><expression>root * h + (2 * b) = 0</expression></statement><statement><variables>h b min</variables><expression>output</expression></statement><statement><variables>m n k</variables><expression>trionym coefficients m n k</expression></statement><statement><variables>h b</variables><expression>trionym roots h b</expression></statement></problem><problem><name>test_2</name><library/><functionMemberVariable>this</functionMemberVariable><statement><variables>in_table</variables><expression>input</expression></statement><statement><variables>asc_table unknown_table</variables><expression>output</expression></statement><statement><variables>in_table asc_table</variables><expression>sort in_table into asc_table in ascending order</expression></statement><statement><variables>in_table unknown_table</variables><expression>sort in_table into unknown_table</expression></statement><statement><variables/><expression>elements</expression></statement><statement><variables>in_table</variables><expression>in_table are positive</expression></statement></problem><problem><name>inequality</name><library>Mathematics</library><functionMemberVariable>this</functionMemberVariable><statement><variables>sand_a sand_b</variables><expression>sand_a &gt;= sand_b</expression></statement><statement><variables>sand_b sand_a</variables><expression>sand_b &lt;= sand_a</expression></statement><statement><variables>max_a max_b</variables><expression>max_a &gt;= max_b</expression></statement><statement><variables>min_a min_b</variables><expression>min_a &lt;= min_b</expression></statement><statement><variables>gt_a gt_b</variables><expression>gt_a &gt; gt_b</expression></statement><statement><variables>lt_a lt_b</variables><expression>lt_a &lt; lt_b</expression></statement><statement><variables>sup_a sup_b</variables><expression>sup_a &gt; sup_b</expression></statement><statement><variables>inf_a inf_b</variables><expression>inf_a &lt; inf_b</expression></statement></problem><problem><name>inequality_implement</name><library>Mathematics</library><functionMemberVariable>this</functionMemberVariable><statement><variables>sand_b sand_a</variables><expression>sand_b = sand_a</expression></statement><statement><variables>max_a max_b</variables><expression>max_a = max(max_b) </expression></statement><statement><variables>min_a min_b</variables><expression>min_a = min(min_b) </expression></statement><statement><variables>gt_a gt_b</variables><expression>gt_a &gt;= gt_b</expression></statement><statement><variables>lt_a lt_b</variables><expression>lt_a &lt;= lt_b</expression></statement><statement><variables>sup_a sup_b</variables><expression>sup_a = sup(sup_b) </expression></statement><statement><variables>inf_a inf_b</variables><expression>inf_a = inf(inf_b) </expression></statement></problem><problem><name>test3</name><library/><functionMemberVariable>this</functionMemberVariable><statement><variables>y x</variables><expression>output</expression></statement><statement><variables>x_min x_max</variables><expression>input</expression></statement><statement><variables>y</variables><expression>y is random</expression></statement><statement><variables>y</variables><expression>y is positive</expression></statement><statement><variables>x</variables><expression>x is random</expression></statement><statement><variables>x x_min x_max</variables><expression>x in range[x_min, x_max] </expression></statement></problem><problem><name>test3_implement</name><library/><functionMemberVariable>this</functionMemberVariable><statement><variables>x_min x_max</variables><expression>input</expression></statement><statement><variables>x</variables><expression>x = random() </expression></statement><statement><variables>y</variables><expression>y = random() </expression></statement><statement><variables>x x_min x_max</variables><expression>x = x_min + (x_max - x_min) * exp( - x ^ 2) </expression></statement><statement><variables>y x</variables><expression>output</expression></statement><statement><variables>y</variables><expression>if(y &lt; 0):
   y = - y;</expression></statement></problem><problem><name>sort</name><library>Programming</library><functionMemberVariable>this</functionMemberVariable><statement><variables>b_desc b_asc</variables><expression>output</expression></statement><statement><variables>a</variables><expression>input</expression></statement><statement><variables>k</variables><expression>any</expression></statement><statement><variables>b_desc k</variables><expression>b_desc[k] &gt;= b_desc[k + 1] </expression></statement><statement><variables>b_asc k</variables><expression>b_asc[k] &lt;= b_asc[k + 1] </expression></statement><statement><variables>b_desc a</variables><expression>b_desc rearranges a</expression></statement><statement><variables>b_asc a</variables><expression>b_asc rearranges a</expression></statement><statement><variables>a b_desc</variables><expression>sort a into b_desc in descending order</expression></statement><statement><variables>a b_asc</variables><expression>sort a into b_asc in ascending order</expression></statement></problem><problem><name>sort_implement</name><library>Programming</library><functionMemberVariable>this</functionMemberVariable><statement><variables>a</variables><expression>input</expression></statement><statement><variables>b_desc b_asc</variables><expression>output</expression></statement><statement><variables>b_desc a</variables><expression>b_desc = a.copy() ;</expression></statement><statement><variables>a b_desc</variables><expression>for i in range(0, len(a) ):
   for j in range(i + 1, len(a) ):
      if(b_desc[i] &lt; b_desc[j]):
         b_desc[i] , b_desc[j] = b_desc[j] , b_desc[i] ;</expression></statement><statement><variables>b_asc a</variables><expression>b_asc = a.copy() ;</expression></statement><statement><variables>a b_asc</variables><expression>for i in range(0, len(a) ):
   for j in range(i + 1, len(a) ):
      if(b_asc[i] &gt; b_asc[j]):
         b_asc[i] , b_asc[j] = b_asc[j] , b_asc[i] ;</expression></statement></problem><problem><name>trionym</name><library>Mathematics</library><functionMemberVariable>this</functionMemberVariable><statement><variables>x1 x2</variables><expression>output</expression></statement><statement><variables>a b c</variables><expression>input</expression></statement><statement><variables>a b c</variables><expression>trionym coefficients a, b, c</expression></statement><statement><variables>x1 x2</variables><expression>trionym roots x1, x2</expression></statement><statement><variables>D</variables><expression>calculate trionym determinant D</expression></statement><statement><variables>D</variables><expression>roots exist only if D &gt;= 0</expression></statement></problem><problem><name>trionym_implement</name><library>Mathematics</library><functionMemberVariable>this</functionMemberVariable><statement><variables>a b c</variables><expression>input</expression></statement><statement><variables>x1 x2</variables><expression>output</expression></statement><statement><variables>x1</variables><expression>x1 = None;</expression></statement><statement><variables>x2</variables><expression>x2 = None;</expression></statement><statement><variables>D b a c</variables><expression>D = b ^ 2 - 4 * a * c;</expression></statement><statement><variables>D x1 b a x2</variables><expression>if(D &gt;= 0):
   x1 = ( - b + D ** 0.5) / (2 * a) ;
   x2 = ( - b - D ** 0.5) / (2 * a) ;</expression></statement></problem><problem><name>random_number</name><library>import_test</library><functionMemberVariable>this</functionMemberVariable><statement><variables>ret0</variables><expression>output</expression></statement><statement><variables>ret0</variables><expression>this function returns a random number ret0</expression></statement></problem><problem><name>random_number_implement</name><library>import_test</library><functionMemberVariable>this</functionMemberVariable><statement><variables>ret0</variables><expression>output</expression></statement><statement><variables>ret0</variables><expression>ret0 = random() </expression></statement></problem><problem><name>abs</name><library>import_test</library><functionMemberVariable>this</functionMemberVariable><statement><variables>x</variables><expression>output</expression></statement><statement><variables>x</variables><expression>input</expression></statement><statement><variables/><expression>this function calculates the absolute value</expression></statement><statement><variables>x</variables><expression>a given number x</expression></statement><statement><variables>x</variables><expression>the absolute value of a number is always positive x</expression></statement><statement><variables>x</variables><expression>x &gt;= 0</expression></statement></problem><problem><name>abs_implement</name><library>import_test</library><functionMemberVariable>this</functionMemberVariable><statement><variables>x</variables><expression>input</expression></statement><statement><variables>x</variables><expression>output</expression></statement><statement><variables>x</variables><expression>if(x &lt; 0):
   x = - x;</expression></statement></problem><problem><name>test_2_implement</name><library/><functionMemberVariable>this</functionMemberVariable><statement><variables>in_table</variables><expression>input</expression></statement><statement><variables>unknown_table in_table</variables><expression>unknown_table = in_table.copy() ;</expression></statement><statement><variables>asc_table in_table</variables><expression>asc_table = in_table.copy() ;</expression></statement><statement><variables>asc_table unknown_table</variables><expression>output</expression></statement><statement><variables>in_table asc_table</variables><expression>for i in range(0, len(in_table) ):
   for j in range(i + 1, len(in_table) ):
      if(asc_table[i] &gt; asc_table[j]):
         asc_table[i] , asc_table[j] = asc_table[j] , asc_table[i] ;</expression></statement><statement><variables>in_table unknown_table</variables><expression>for i in range(0, len(in_table) ):
   for j in range(i + 1, len(in_table) ):
      if(unknown_table[i] &lt; unknown_table[j]):
         unknown_table[i] , unknown_table[j] = unknown_table[j] , unknown_table[i] ;</expression></statement><statement><variables>in_table</variables><expression>if(in_table &lt; 0):
   in_table = - in_table;</expression></statement></problem><problem><name>limit</name><library>import_test</library><functionMemberVariable>this</functionMemberVariable><statement><variables>ret0</variables><expression>output</expression></statement><statement><variables>x x_min x_max</variables><expression>input</expression></statement><statement><variables>x x_min x_max</variables><expression>snaps the input x to range[x_min, x_max] </expression></statement></problem><problem><name>limit_implement</name><library>import_test</library><functionMemberVariable>this</functionMemberVariable><statement><variables>x x_min x_max</variables><expression>input</expression></statement><statement><variables>ret0</variables><expression>output</expression></statement><statement><variables>ret0 x_min x_max x</variables><expression>ret0 = x_min + (x_max - x_min) * exp( - x ^ 2) </expression></statement><statement><variables>x ret0</variables><expression>x = ret0</expression></statement></problem><problem><name>linear</name><library>import_test</library><functionMemberVariable>this</functionMemberVariable><statement><variables>root</variables><expression>output</expression></statement><statement><variables>a b</variables><expression>input</expression></statement><statement><variables>root a b</variables><expression>solves the linear equation root a b</expression></statement><statement><variables>a b</variables><expression>coefficients a, b</expression></statement><statement><variables>root a b</variables><expression>root * a + b = 0</expression></statement></problem><problem><name>linear_implement</name><library>import_test</library><functionMemberVariable>this</functionMemberVariable><statement><variables>a b</variables><expression>input</expression></statement><statement><variables>root</variables><expression>output</expression></statement><statement><variables>root</variables><expression>root = None</expression></statement><statement><variables>a root b</variables><expression>if(a != 0):
   root = - b / a</expression></statement></problem><problem><name>test_implement</name><library/><functionMemberVariable>this</functionMemberVariable><statement><variables>m n k</variables><expression>input</expression></statement><statement><variables>h b root</variables><expression>output</expression></statement><statement><variables>b</variables><expression>b = None</expression></statement><statement><variables>h</variables><expression>h = None</expression></statement><statement><variables>D n m k</variables><expression>D = n ^ 2 - 4 * m * k</expression></statement><statement><variables>D h n m b</variables><expression>if(D &gt;= 0):
   h = ( - n + D ** 0.5) / (2 * m) ;
   b = ( - n - D ** 0.5) / (2 * m) ;</expression></statement><statement><variables>temp0 b</variables><expression>temp0 = 2 * b</expression></statement><statement><variables>root</variables><expression>root = None</expression></statement><statement><variables>h root temp0</variables><expression>if(h != 0):
   root = - temp0 / h</expression></statement></problem><implement><source>1</source><result>20</result></implement><implement><source>2</source><result>15</result></implement><implement><source>3</source><result>4</result></implement><implement><source>5</source><result>6</result></implement><implement><source>7</source><result>8</result></implement><implement><source>9</source><result>10</result></implement><implement><source>11</source><result>12</result></implement><implement><source>13</source><result>14</result></implement><implement><source>16</source><result>17</result></implement><implement><source>18</source><result>19</result></implement></root>